-- IKEA Retail sales analysis project. This project tackles the following business problems:

-- Find the average discount and total revenue generated for each subcategory across all stores.

WITH total_revenue AS
(
SELECT p.subcategory, SUM((1-s.discount_percentage)*s.unit_price*s.qty) AS total_sales
FROM sales s
LEFT JOIN products p
ON s.product_id = p.product_id
GROUP BY p.subcategory
ORDER BY SUM((1-s.discount_percentage)*s.unit_price*s.qty) DESC
),

avg_discount AS
(
SELECT p.subcategory, AVG(s.discount_percentage) AS avg_disc
FROM sales s
LEFT JOIN products p
ON s.product_id = p.product_id
GROUP BY p.subcategory
ORDER BY AVG(s.discount_percentage) DESC
)

SELECT tr.subcategory,tr.total_sales,ag.avg_disc
FROM total_revenue tr
JOIN avg_discount ag
ON tr.subcategory=ag.subcategory
GROUP BY tr.subcategory,tr.total_sales,ag.avg_disc
ORDER BY tr.total_sales DESC, ag.avg_disc

-- Determine the product with the highest number of units sold in each category.

WITH total_sales AS
(
SELECT s.product_id,p.product_name,p.category,SUM(s.qty) AS total_units
FROM sales s
JOIN products p
ON s.product_id=p.product_id
GROUP BY s.product_id,p.product_name,p.category
ORDER BY total_units DESC
),

ranked_sales AS
(
SELECT ts.category,ts.product_id,ts.product_name,ts.total_units,
ROW_NUMBER() OVER (PARTITION BY ts.category ORDER BY ts.total_units DESC) AS rn
FROM total_sales ts
)

SELECT rs.category,rs.product_id,rs.product_name,rs.total_units
FROM ranked_sales rs
WHERE rn=1
ORDER BY rs.total_units DESC

-- Identify stores with sales for all products in the "Furniture" category.

SELECT st.store_name,p.product_name,p.category,SUM((1-s.discount_percentage)*s.unit_price*s.qty) AS net_sale,SUM(s.qty) AS units_sold
FROM sales s
LEFT JOIN stores st 
ON s.store_id = st.store_id
JOIN products p
ON s.product_id = p.product_id
WHERE p.category ='Furniture'
GROUP BY st.store_name,p.product_name,p.category
ORDER BY store_name,net_sale DESC, units_sold

--Retrieve the total revenue generated by each store and classify it as "High Revenue" or "Low Revenue" based on the overall average.

WITH tot_revenue AS 
(
SELECT s.store_id,st.store_name, SUM((1-s.discount_percentage)*s.unit_price*s.qty) AS total_sale
FROM sales s
LEFT JOIN stores st
ON s.store_id = st.store_id
GROUP BY s.store_id,st.store_name
ORDER BY total_sale DESC
),

avg_revenue AS
(
SELECT (SUM((1-s.discount_percentage)*s.unit_price*s.qty)/COUNT (DISTINCT s.store_id)) AS average_revenue
FROM sales s
)

SELECT tr.store_id,tr.store_name,tr.total_sale,
CASE WHEN tr.total_sale > ar.average_revenue THEN 'High Revenue'
ELSE 'Low Revenue' END AS revenue_level
FROM tot_revenue tr,avg_revenue ar

-- Use window functions to identify the latest sale for each product in each store.

WITH dated_orders AS
(
SELECT st.store_name,s.product_id,p.product_name,s.order_id,s.order_date,
ROW_NUMBER() OVER (PARTITION BY st.store_name,s.product_id ORDER BY s.order_date DESC) AS rn
FROM sales s
LEFT JOIN stores st
ON s.store_id = st.store_id
JOIN products p
ON s.product_id=p.product_id
)

SELECT dt.store_name,dt.product_name,dt.order_id,dt.order_date
FROM dated_orders dt
WHERE rn=1
ORDER BY dt.store_name , dt.order_date DESC

-- Find the number of unique products sold in each store within the "Furniture" category.


SELECT s.store_id,st.store_name, COUNT (DISTINCT s.product_id) AS unique_sales
FROM sales s 
LEFT JOIN stores st
ON s.store_id=st.store_id
JOIN products p
ON s.product_id = p.product_id
WHERE p.category='Furniture'
GROUP BY s.store_id,st.store_name
ORDER BY unique_sales

--For each product category, identify the top-performing stores based on total sales revenue and assign a performance rank to each.

WITH tot_sales AS
(
SELECT p.category,st.store_name,SUM((1-s.discount_percentage)*s.unit_price*s.qty) AS net_sales
FROM sales s 
LEFT JOIN stores st
ON s.store_id=st.store_id
JOIN products p
ON s.product_id = p.product_id
GROUP BY p.category,st.store_name
ORDER BY p.category,net_sales DESC
),

rank_sales AS
(
SELECT ts.category,ts.store_name,ts.net_sales,
ROW_NUMBER() OVER (PARTITION BY ts.category ORDER BY ts.net_sales DESC) AS performance_rank
FROM tot_sales ts
)

SELECT rs.category,rs.store_name,rs.net_sales,rs.performance_rank
FROM rank_sales rs
WHERE rs.performance_rank<=4
ORDER BY rs.category,rs.net_sales DESC

-- Identify products that have never been sold in any store.

SELECT p.product_id,p.product_name,p.category
FROM sales s 
RIGHT JOIN products p
ON s.product_id = p.product_id
WHERE s.qty IS NULL


-- List products with inventory levels below their reorder level and sales quantities above the average for their category.

WITH sales_analysis AS
(
SELECT p.category, (SUM(s.qty)/COUNT(DISTINCT s.order_id)) AS avg_order
FROM sales s
LEFT JOIN products p
ON s.product_id = p.product_id
GROUP BY p.category
)

SELECT DISTINCT s.product_id,p.product_name,p.category,i.current_stock,i.reorder_level
FROM sales_analysis sa, sales s
LEFT JOIN inventory i
ON s.product_id=i.product_id
JOIN products p
ON s.product_id = p.product_id
WHERE i.current_stock<i.reorder_level
AND s.qty >= sa.avg_order
GROUP BY s.product_id,p.product_name,p.category,i.current_stock,i.reorder_level,s.qty
ORDER BY p.category

-- List cities with total sales greater than the average sales for their country.

WITH city_sales AS
(
SELECT st.city,st.country,SUM((1-s.discount_percentage)*s.unit_price*s.qty) AS tot_sales,COUNT(s.order_id) AS total_orders
FROM sales s
JOIN stores st
ON s.store_id=st.store_id
GROUP BY st.city,st.country
),

avg_countrysales AS
(
SELECT st.country, (SUM((1-s.discount_percentage)*s.unit_price*s.qty)/COUNT( DISTINCT st.city)) AS avg_order
FROM sales s
JOIN stores st 
ON s.store_id = st.store_id
GROUP BY st.country
ORDER BY avg_order DESC
)

SELECT cs.city,cs.country,cs.tot_sales
FROM city_sales cs 
JOIN avg_countrysales acs
ON cs.country=acs.country
WHERE cs.tot_sales > acs.avg_order
ORDER BY cs.country DESC,cs.tot_sales DESC

-- Assign ranks for each store based on total revenue.

SELECT s.store_id,st.store_name,(SUM((1-s.discount_percentage)*s.unit_price*s.qty)) AS total_revenue,
ROW_NUMBER() OVER (ORDER BY SUM((1-s.discount_percentage)*s.unit_price*s.qty) DESC) AS performance_rank
FROM sales s
LEFT JOIN stores st 
ON s.store_id=st.store_id
GROUP BY s.store_id,st.store_name

-- Find the top three stores with the highest sales revenue in each country using the DENSE_RANK function.

WITH tot_sales AS
(
SELECT s.store_id,st.store_name,st.country, SUM((1-s.discount_percentage)*s.unit_price*s.qty) AS net_sales,
DENSE_RANK() OVER (PARTITION BY st.country ORDER BY SUM((1-s.discount_percentage)*s.unit_price*s.qty) DESC) AS sales_ranking
FROM sales s  
LEFT JOIN stores st
ON s.store_id = st.store_id
GROUP BY s.store_id,st.store_name,st.country
)

SELECT ts.store_id,ts.store_name,ts.country,ts.net_sales,ts.sales_ranking
FROM tot_sales ts
WHERE ts.sales_ranking <=3
ORDER BY ts.country DESC,ts.net_sales DESC

-- Use a correlated subquery to find products whose sales exceeded the average sales of their category. 

SELECT DISTINCT p.product_id, p.product_name,p.category
FROM sales s
JOIN products p ON s.product_id = p.product_id
WHERE s.qty > ( 
		SELECT AVG(s2.qty)
        FROM sales s2
        JOIN products p2 ON s2.product_id = p2.product_id
        WHERE p2.category = p.category )
ORDER BY p.category, p.product_name;